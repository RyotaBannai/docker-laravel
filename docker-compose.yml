version: "3"
services:
  app:
    build: # image があればタグ名などでコンテナをサービスにアタッチする. 今回は一からbuildする.
      context: ./docker/php
      args:
        - TZ=${TZ:-Asia/Tokyo}
    ports:
      - ${APP_PORT:-18000}:8000
      # - "8888:8000" # Dockerfileではexpose 8000 などで指定して、
                      # 起動する時に docker run -p 8888:8000 --name myfirstapp myfirstapp などとすると 8888でアクセスできる.
    volumes:
      # https://www.nyamucoro.com/entry/2018/08/13/222617
      # php:
      # 手元で./webにプログラムを書いた時に、コンテナに自動反映される。
      # 普通なら、 docker buildで何度もコンテナ作り直す必要があるので便利。
      # mysql:
      # データの永続化。
      # 普段、コンテナを落とすと、コンテナの中のデータは一から作り直しになってしまう。
      # でも、手元のデータをマウントしているなら、コンテナを立ち上げる度にデータが消えない。

      - ${PROJECT_PATH:-./src}:/work # https://docs.docker.com/compose/compose-file/#variable-substitution
      - ./docker/ash:/etc/profile.d
      - ./docker/php/psysh:/root/.config/psysh
      - ./logs:/var/log/php
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini

    working_dir: /work # docker compose でもwork dir を指定できる.
    environment:
      - DB_CONNECTION=mysql
      - DB_DATABASE=${DB_NAME:-homestead}
      - DB_USERNAME=${DB_USER:-homestead}
      - DB_PASSWORD=${DB_PASS:-secret}
      - TZ=${TZ:-Asia/Tokyo}
      - MAIL_HOST=${MAIL_HOST:-mail}
      - MAIL_PORT=${MAIL_PORT:-1025}
      - CACHE_DRIVER=redis
#      - SESSION_DRIVER=redis # エラーになるなあ。
  #　https://stackoverflow.com/questions/46170739/how-to-setup-laravel-session-storage-to-redis
      - QUEUE_DRIVER=redis
      - REDIS_HOSfT=redis
    #links:
    #  - redis
    env_file:
      # - ./src/.env
      - .env

  web:
    image: nginx:1.17-alpine
    depends_on:
      - app
    ports:
      - ${WEB_PORT:-10080}:80
    volumes:
      - ${PROJECT_PATH:-./src}:/work
      - ./logs:/var/log/nginx
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    environment:
      - TZ=${TZ:-Asia/Tokyo}

  db:
    image: mysql:8.0
    volumes:
      - ./docker/mysql/init:/docker-entrypoint-initdb.d # 初期データを投入するSQLが格納されているdir
      - db-store:/var/lib/mysql
      - ./logs:/var/log/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    environment:
      - MYSQL_DATABASE=${DB_NAME:-homestead}
      - MYSQL_USER=${DB_USER:-homestead}
      - MYSQL_PASSWORD=${DB_PASS:-secret}
      - MYSQL_ROOT_PASSWORD=${DB_PASS:-secret}
      - TZ=${TZ:-Asia/Tokyo}
    ports:
      - ${DB_PORT:-13306}:3306

  db-testing:
    image: mysql:8.0
    volumes:
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    tmpfs:
      - /var/lib/mysql
      - /var/log/mysql
    environment:
      - MYSQL_DATABASE=${DB_NAME:-homestead}
      - MYSQL_USER=${DB_USER:-homestead}
      - MYSQL_PASSWORD=${DB_PASS:-secret}
      - MYSQL_ROOT_PASSWORD=${DB_PASS:-secret}
      - TZ=${TZ:-Asia/Tokyo}
    ports:
      - ${DB_TESTING_PORT:-13307}:3306

  node:
    image: node:12.14-alpine
    tty: true
    volumes:
      - ${PROJECT_PATH:-./src}:/work
    working_dir: /work

  redis:
    image: redis:5.0-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-store:/data


  mail:
    image: mailhog/mailhog
    ports:
      - ${MAILHOG_PORT:-18025}:8025

volumes:
  db-store: # db-data のように、docker-compose.yml トップレベルに名前をつけて宣言された volume を「名前つき volume（named volume）」と呼ぶ.
  redis-store:
